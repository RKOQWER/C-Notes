1. # is called preprocessing directive .In computer programming, a preprocessor directive is a statement that
instructs the preprocessor to perform certain actions before the compilation of the
code.Preprocessor directives are typically used to define macros, include header 
files, conditionally compile code, and perform other preprocessing tasks.

In C and C++, preprocessor directives begin with the '#' symbol
 and are typically placed at the beginning of a source file, before the main code.

2. #include<iostream> is used to copy the contents of iostream file in our program.

3. First we compile the code and then we build it.

4. Source code (.cpp )->complie->.obj file->build->run ->.exe file.

5. When cin.get() is called, the program waits for the user to input a single
 character, and then reads that character from the input stream. 
The character is stored in a variable of type char. It works like this if it is 
written at the last of program

6. main is the first function to be called. In a project or program only one main
function is present.

7. Primitive data types in c++ int ,float , bool , double , char

8. string is not the primitive data type.

9. If the declaration is present the compiler will not give error. To see if the 
file is actually present or not is the headache of linker.

10. Linker may search in the same directory or some predefined directories.

11.endl is an output manipulator in C++ which is used to insert a newline character and flush 
the output buffer. This means that any pending output in the buffer will be 
written to the output stream and the buffer will be cleared. 
The endl manipulator is often used to ensure that the output is immediately 
displayed on the console or written to a file.

12. On the other hand, \n is simply an escape sequence that represents a newline character. 
It is used to move the cursor to the next line without clearing the output 
buffer.

13. In a project only one main function is present . Other .cpp files are called 
library files and they contain the definition of the function. Header files (.hpp)
files have declaration of the functions.
#include"name of header_file.hpp".

14. In C++, #pragma once is a preprocessor directive that is used to ensure that a 
header file is included only once in a compilation unit.
When #pragma once is added to the beginning of a header file, the preprocessor
checks if it has already been included in the current compilation unit. If it has 
been included, then the preprocessor skips over the contents of the file. If it 
has not been included, then the preprocessor includes the contents of the file in 
the current compilation unit and marks the header file as included.
Using #pragma once can help to prevent issues that can arise when a header file is 
accidentally included multiple times, such as multiple definition errors.
#pragma once is supported by most modern C++ compilers, but it is not part of the 
C++ standard. Some older compilers may not support it, in which case alternative 
include guards can be used.

15. All numbers except o referred as true and all strings except nullptr or NULL referred as true.

16. Class is used to define the properties and behaviour of an object
Behaviour means actions(Functions)
Properties means data members


17. Inheritance is the property of acquiring the properties and behaviour of 
some other class into a new class.

18. Different types of inheritance
* Single Inheritance
* Multiple Inheritance
* Multilevel Inheritance
* Hirarchial inheritance
* Hybrid Inheritance

20.

#include <iostream>
using namespace std;

// Base class 1
class Shape {
public:
    virtual float area() = 0;
};

// Derived class 1
class Rectangle : public Shape {
private:
    float length, width;

public:
    Rectangle(float l, float w) {
        length = l;
        width = w;
    }

    float area() {
        return length * width;
    }
};

// Base class 2
class Color {
public:
    virtual void fill_color() = 0;
};

// Derived class 2
class Red : public Color {
public:
    void fill_color() {
        cout << "Red color filled" << endl;
    }
};

// Derived class 3 (Multiple Inheritance)
class RedRectangle : public Rectangle, public Red {
public:
    RedRectangle(float l, float w) : Rectangle(l, w) {}

    void display() {
        cout << "Area of Rectangle: " << area() << endl;
        fill_color();
    }
};

// Main function
int main() {
    RedRectangle rr(5, 10);
    rr.display();
    return 0;
}


21. Multilevel Inheritance

#include <iostream>
using namespace std;

// Base class
class Person {
public:
    string name;
    int age;

    void display() {
        cout << "Name: " << name << endl;
        cout << "Age: " << age << endl;
    }
};

// Derived class 1
class Student : public Person {
public:
    int roll_no;

    void display() {
        Person::display();
        cout << "Roll No: " << roll_no << endl;
    }
};

// Derived class 2 (Multilevel Inheritance)
class GradStudent : public Student {
public:
    string subject;

    void display() {
        Student::display();
        cout << "Subject: " << subject << endl;
    }
};

// Main function
int main() {
    GradStudent gs;
    gs.name = "John";
    gs.age = 25;
    gs.roll_no = 1234;
    gs.subject = "Computer Science";
    gs.display();
    return 0;
}



22. Hirarchial Inheritance

#include <iostream>
using namespace std;

// Base class
class Vehicle {
public:
    int wheels;
    string color;

    void display() {
        cout << "Color: " << color << endl;
        cout << "Wheels: " << wheels << endl;
    }
};

// Derived class 1 (Hierarchical Inheritance)
class Car : public Vehicle {
public:
    int seats;

    void display() {
        Vehicle::display();
        cout << "Seats: " << seats << endl;
    }
};

// Derived class 2 (Hierarchical Inheritance)
class Bike : public Vehicle {
public:
    string type;

    void display() {
        Vehicle::display();
        cout << "Type: " << type << endl;
    }
};

// Main function
int main() {
    Car c;
    c.wheels = 4;
    c.color = "Red";
    c.seats = 5;
    c.display();

    Bike b;
    b.wheels = 2;
    b.color = "Blue";
    b.type = "Sports";
    b.display();

    return 0;
}


23. Availability : Whenever a child class inherits from base class whatever be the 
visibility of modes of the members of base class and whatever may be the type of
visibility of the inheritance , all the members of the base class is present in 
the child class.

24. class B:public A
* Public member of A behaves as public members of B
* Protected member of A behaves as protected member of B
* Private member of A is not accessible to B.


25. class B:protected A
* Public member of A behaves as protected members of B
* Protected member of A behaves as protected member of B
* Private member of A is not accessible to B.

26. class B:private  A or class B:A
* Public member of A behaves as private members of B
* Protected member of A behaves as private member of B
* Private member of A is not accessible to B.


27. Association means relationship between classes.Different types of association that
are possible are:-
* Aggregation
* Composition 
* Inheritance

28. In C++, aggregation is a type of association between classes that represents a
"has-a" relationship, where one class contains an instance of another class as a
member variable. This relationship is similar to composition, but with aggregation,
the contained object can exist independently of the containing object.

Example 

#include <iostream>
#include <vector>
using namespace std;

class Course {
public:
    string name;
    int credits;

    Course(string name, int credits) {
        this->name = name;
        this->credits = credits;
    }
};

class Student {
public:
    string name;
    vector<Course*> courses;

    Student(string name) {
        this->name = name;
    }

    void addCourse(Course* course) {
        courses.push_back(course);
    }

    void display() {
        cout << "Student Name: " << name << endl;
        cout << "Enrolled Courses:" << endl;
        for (auto course : courses) {
            cout << "- " << course->name << " (" << course->credits << " credits)" << endl;
        }
    }
};

int main() {
    Course c1("Programming 101", 3);
    Course c2("Data Structures", 4);

    Student s("John Doe");
    s.addCourse(&c1);
    s.addCourse(&c2);

    s.display();

    return 0;
}


In this code, we have a Course class that contains two data members name and credits representing the name and credits of a course.

We then have a Student class that contains a name data member and a vector of Course pointers called courses. The Student class has an addCourse() function to add a course to the list of courses for the student, and a display() function to display the student's name and enrolled courses.

In the main() function, we create two Course objects c1 and c2, and a Student object s with the name "John Doe". We add the two courses to the student's list of courses using the addCourse() function, and then call the display() function to display the student's name and enrolled courses.

This example demonstrates aggregation because a Student object contains a vector of Course pointers, but the Course objects themselves exist independently of the Student object. In other words, the Student object is composed of Course objects, but the Course objects do not depend on the Student object.


27. In C++, composition is a type of association between classes that represents a 
"part-of" relationship, where one class contains an instance of another class as a
member variable, and the contained object cannot exist independently of the 
containing object. This relationship is similar to aggregation, but with 
composition, the contained object is an integral part of the containing object.

Example:-  

#include <iostream>
using namespace std;

class Engine {
public:
    Engine() {
        cout << "Engine created." << endl;
    }

    void start() {
        cout << "Engine started." << endl;
    }

    void stop() {
        cout << "Engine stopped." << endl;
    }
};

class Car {
private:
    Engine engine;

public:
    Car() {
        cout << "Car created." << endl;
    }

    void start() {
        engine.start();
    }

    void stop() {
        engine.stop();
    }
};

int main() {
    Car c;
    c.start();
    c.stop();

    return 0;
}

In this code, we have an Engine class that represents an engine, and a Car class that represents a car. The Car class has a private Engine object called engine, which means that the Engine object is part of the Car object and cannot be accessed from outside the Car object.

In the main() function, we create a Car object c. When we create the Car object, its constructor is called, which in turn creates the Engine object engine. We can then call the start() and stop() functions on the Car object, which in turn call the corresponding functions on the Engine object.

This example demonstrates composition because the Car object contains an Engine object, and the Engine object is an integral part of the Car object. In other words, the Engine object cannot exist independently of the Car object, and it is created and destroyed along with the Car object.

28. Is A relationship is always implemented as public relationship.

29. In C++, there are three types of inheritance: private, public, and protected. Here's when to use each type of inheritance:

Private Inheritance:
When a derived class is privately inherited from a base class, all public and protected members of the base class become private members of the derived class. This means that the derived class can only access the base class's public and protected members through its own public and protected member functions.
Private inheritance is used when the derived class wants to implement the functionality of the base class, but it does not want to expose the interface of the base class to the outside world.

Public Inheritance:
When a derived class is publicly inherited from a base class, all public members of the base class become public members of the derived class, and all protected members of the base class become protected members of the derived class. This means that the derived class can access the public and protected members of the base class directly.
Public inheritance is used when the derived class wants to inherit the interface and functionality of the base class and also wants to expose it to the outside world.

Protected Inheritance:
When a derived class is protectedly inherited from a base class, all public and protected members of the base class become protected members of the derived class. This means that the derived class can access the public and protected members of the base class directly, but the outside world cannot.
Protected inheritance is used when the derived class wants to inherit the functionality of the base class, but it wants to hide the interface of the base class from the outside world and only expose it to its own derived classes.

It's important to note that inheritance should be used judiciously and only when it makes sense. Inheritance can increase the complexity of code and make it harder to understand and maintain, so it should only be used when it simplifies the code and makes it more reusable.

29. If we create the object of child class then the constructor of child class will run. 
The first step in the constructor of child class calls the constructor of parent class.

30. If copy constructor is not present then compiler will make its own copy constructor.

31. If default constructor is not present then compiler will make its own default constructor.

32. First the destructor of child will run and in the last step of it , it will call the destructor of parent class.

33. Example of copy constructor:-

#include <iostream>
using namespace std;

class Person {
private:
    string name;
    int age;

public:
    // Constructor
    Person(string n, int a) {
        name = n;
        age = a;
    }

    // Copy constructor
    Person(const Person& p) {
        name = p.name;
        age = p.age;
    }

    // Getter functions
    string getName() {
        return name;
    }

    int getAge() {
        return age;
    }
};

int main() {
    // Create a Person object
    Person p1("John", 25);

    // Create a copy of the Person object using the copy constructor
    Person p2 = p1;

    // Output the values of the original and copied objects
    cout << "Original Person: " << p1.getName() << " " << p1.getAge() << endl;
    cout << "Copied Person: " << p2.getName() << " " << p2.getAge() << endl;

    return 0;
}

34. An object pointer is a pointer that contains the address of an object.

35. this is a local object pointer in every instance memeber function containing 
address of the caller object.

36. Whether you use or not , this pointer is present in every member function

37. this pointer cannot be modified.

38. Static memeory allocation (STA) This happens in compile time and declaration 
statement is an example of it.

DMA (Dynamic Memeory Allocation ) happens at runtime and object creation is a part 
of it.

39. Method Overloading occurs when function in same class have same name but different
* signature. Function Signature example: void f(int x,int y)
* Here f(int x,int y) is function signature.It is an example of compile time
* polymorphism. Operator overloading is also an example of compile time polymorphism
* 
* Method overriding is an example of runtime polymorphism. Here function with 
* same return type and signature is present in both base and dervied class and
* when we create an object of derived class the function present in derived class
* is executed.
* 
* Method Hiding:- If function with same name but different signature is present
* in both derived and base class then it is an example of function hiding.
* If the function is not found in child class then thge compiler also
* searches for it in the parent class.

40. /*
* Base class pointer can point to its object as well as the object of child class.
* But converse is not true.
* 
* 
*/

/*
#include<iostream>

class A
{
public:
	void f()
	{
		std::cout << "A\n";
	}
};

class B:public A
{
public:
	void f()
	{
		std::cout << "B\n";
	}
};

int main()
{
	A* obj1;
	A* obj2;
	obj1 = new A();
	obj1->f();// it should print A
	obj2 = new B();
	/* Here the object is created in run time . So early binding will happen
	* and the compiler will think seeing the type of obj2 (declaration is resolved 
	during compile time) that is an object of A class . So output is A. To force the
	late binding(or runtime binding or dynamic binding) we need to use make the
	f() function in class A (parent class) as a virtual function.
	*/
	//obj2->f();
	//return 0;
//} 

#include<iostream>

class A
{
public:
	virtual void f()
	{
		std::cout << "A\n";
	}
};

class B :public A
{
public:
	void f()
	{
		std::cout << "B\n";
	}
};

int main()
{
	A* obj1;
	A* obj2;
	obj1 = new A();
	obj1->f();// it should print A
	obj2 = new B();
	/* Here the object is created in run time . So early binding will happen
	* and the compiler will think seeing the type of obj2 (declaration is resolved
	during compile time) that is an object of A class . So output is A. To force the
	late binding(or runtime binding or dynamic binding) we need to use make the
	f() function in class A (parent class) as a virtual function.
	*/
	obj2->f();
	return 0;
}

/*
In C++, the vptr (virtual pointer) and vtable (virtual function table) are used to 
implement dynamic polymorphism through virtual functions. Here are some of the key
properties of vptr and vtable:

Vptr is a pointer that points to the vtable of the object's class. Every object of
a class with at least one virtual function has a vptr.

The vtable is a table of function pointers that are used to implement virtual 
functions. The vtable is created by the compiler at compile time, and it is unique
to each class with virtual functions.


Each virtual function has an entry in the vtable, and each entry in the vtable
points to the implementation of the corresponding virtual function.

The vtable is shared by all objects of the same class, and it is stored in 
read-only memory. This means that the vtable is the same for all objects of a 
class with virtual functions, and it cannot be modified at runtime.

When a virtual function is called on an object, the vptr of the object is used to
locate the object's vtable, and the appropriate function pointer from the vtable
is used to call the correct implementation of the virtual function.

The vptr is typically located at the beginning of the object's memory layout, 
and it is automatically managed by the compiler. The vptr is not visible to the 
programmer, but its presence and behavior are essential for virtual function 
dispatch to work correctly.

The use of vptr and vtable incurs a small performance overhead compared to 
non-virtual functions, but it enables powerful features like polymorphism and 
inheritance that are essential to object-oriented programming.

Overall, the vptr and vtable are key components of C++'s implementation of
dynamic polymorphism, which allows objects to exhibit different behavior based 
on their actual type rather than just their static type. This feature is 
fundamental to many advanced programming techniques like inheritance, abstract 
classes, and interfaces.
*/

41. In C++, an abstract class is a class that cannot be instantiated and is designed to be used as a base class for other classes. An abstract class typically contains at least one pure virtual function, which is a virtual function that has no implementation and is marked with the " = 0 " syntax. A pure virtual function is used to make the class abstract and ensure that any derived class must provide an implementation for the function.

Here's an example of an abstract class in C++:

class Shape {
public:
   // Pure virtual function
   virtual double area() const = 0;
};

class Circle : public Shape {
public:
   Circle(double radius) : m_radius(radius) {}
   double area() const {
      return 3.14159 * m_radius * m_radius;
   }
private:
   double m_radius;
};

class Rectangle : public Shape {
public:
   Rectangle(double width, double height) : m_width(width), m_height(height) {}
   double area() const {
      return m_width * m_height;
   }
private:
   double m_width;
   double m_height;
};

